// Generated by CoffeeScript 1.10.0
(function() {
  var _, expect, http, ref, sharedExamples, utils,
    slice = [].slice;

  expect = require('expect.js');

  _ = require("lodash");

  utils = require("../lib/utils");

  http = require('http');

  exports.TIMEOUT_SHORT = 5000;

  exports.TIMEOUT_MEDIUM = 20000;

  exports.TIMEOUT_LONG = 50000;

  exports.SUFFIX = (ref = process.env.TRAVIS_JOB_ID) != null ? ref : Math.floor(Math.random() * 999999);

  exports.SDK_TAG = "SDK_TEST";

  exports.TEST_TAG_PREFIX = "cloudinary_npm_test";

  exports.TEST_TAG = exports.TEST_TAG_PREFIX + "_" + exports.SUFFIX;

  exports.UPLOAD_TAGS = [exports.TEST_TAG, exports.TEST_TAG_PREFIX, exports.SDK_TAG];

  exports.IMAGE_FILE = "test/resources/logo.png";

  exports.LARGE_RAW_FILE = "test/resources/TheCompleteWorksOfShakespeare.mobi";

  exports.LARGE_VIDEO = "test/resources/CloudBookStudy-HD.mp4";

  exports.EMPTY_IMAGE = "test/resources/empty.gif";

  exports.RAW_FILE = "test/resources/docx.docx";

  exports.ICON_FILE = "test/resources/favicon.ico";

  exports.IMAGE_URL = "http://res.cloudinary.com/demo/image/upload/sample";

  exports.test_cloudinary_url = function(public_id, options, expected_url, expected_options) {
    var url;
    url = utils.url(public_id, options);
    expect(url).to.eql(expected_url);
    expect(options).to.eql(expected_options);
    return url;
  };

  expect.Assertion.prototype.produceUrl = function(url) {
    var actual, actualOptions, options, public_id, ref1;
    ref1 = this.obj, public_id = ref1[0], options = ref1[1];
    actualOptions = _.cloneDeep(options);
    actual = utils.url(public_id, actualOptions);
    this.assert(actual.match(url), function() {
      return "expected '" + public_id + "' and " + (JSON.stringify(options)) + " to produce '" + url + "' but got '" + actual + "'";
    }, function() {
      return "expected '" + public_id + "' and " + (JSON.stringify(options)) + " not to produce '" + url + "' but got '" + actual + "'";
    });
    return this;
  };

  expect.Assertion.prototype.emptyOptions = function() {
    var actual, options, public_id, ref1;
    ref1 = this.obj, public_id = ref1[0], options = ref1[1];
    actual = _.cloneDeep(options);
    utils.url(public_id, actual);
    this.assert(_.isEmpty(actual), function() {
      return "expected '" + public_id + "' and " + (JSON.stringify(options)) + " to produce empty options but got " + (JSON.stringify(actual));
    }, function() {
      return "expected '" + public_id + "' and " + (JSON.stringify(options)) + " not to produce empty options";
    });
    return this;
  };

  expect.Assertion.prototype.beServedByCloudinary = function(done) {
    var actual, actualOptions, options, public_id, ref1;
    ref1 = this.obj, public_id = ref1[0], options = ref1[1];
    actualOptions = _.cloneDeep(options);
    actual = utils.url(public_id, actualOptions);
    http.get(actual, (function(_this) {
      return function(res) {
        _this.assert(res.statusCode === 200, function() {
          return "Expected to get " + actual + " but server responded with \"" + res.statusCode + ": " + res.headers['x-cld-error'] + "\"";
        }, function() {
          return "Expeted not to get " + actual + ".";
        });
        return done();
      };
    })(this));
    return this;
  };

  sharedExamples = (function() {
    function sharedExamples(name, examples) {
      if (this.allExamples == null) {
        this.allExamples = {};
      }
      if (_.isFunction(examples)) {
        this.allExamples[name] = examples;
        examples;
      } else {
        if (this.allExamples[name] != null) {
          return this.allExamples[name];
        } else {
          return function() {
            return console.log("Shared example " + name + " was not found!");
          };
        }
      }
    }

    return sharedExamples;

  })();

  exports.sharedExamples = exports.sharedContext = sharedExamples;

  exports.itBehavesLike = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return context("behaves like " + name, function() {
      return sharedExamples(name).apply(this, args);
    });
  };

  exports.includeContext = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return sharedExamples(name).apply(this, args);
  };

}).call(this);

//# sourceMappingURL=spechelper.js.map
